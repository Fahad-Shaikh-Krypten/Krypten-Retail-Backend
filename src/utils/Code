Notification:
const notificationSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  type: { type: String, enum: ['SOS', 'Achievement', 'General'], required: true },
  message: { type: String, required: true },
  isRead: { type: Boolean, default: false },
  timestamp: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Notification', notificationSchema);


Location log :
const locationLogSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  },
  timestamp: { type: Date, default: Date.now }
});

locationLogSchema.index({ location: '2dsphere' });

module.exports = mongoose.model('LocationLog', locationLogSchema);

Sos event details:
const sosEventSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  },
  radius: { type: Number, required: true }, // Radius of the alert in meters
  status: { type: String, enum: ['active', 'resolved', 'cancelled'], default: 'active' },
  timestamp: { type: Date, default: Date.now },
  notifiedUsers: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }]
});

sosEventSchema.index({ location: '2dsphere' });

module.exports = mongoose.model('SosEvent', sosEventSchema);


Achievement:
const achievementSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  dateAwarded: { type: Date, default: Date.now },
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }
});

module.exports = mongoose.model('Achievement', achievementSchema);


User schema:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: { type: Number, required: true, min: 15 },
  gender: { type: String, enum: ['Male', 'Female'], required: true },
  aadharNumber: { type: String, unique: true, required: true },
  phoneNumber: { type: String, unique: true, required: true },
  sosPin: { type: String, required: true },
  voiceSosPhrase: { type: String, required: true },
  isVerified: { type: Boolean, default: false },
  dateRegistered: { type: Date, default: Date.now },
  achievements: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Achievement' }],
  lastKnownLocation: {
    type: {
      type: String,
      enum: ['Point'],
      default: 'Point'
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true
    }
  }
});

userSchema.index({ lastKnownLocation: '2dsphere' });

module.exports = mongoose.model('User', userSchema);